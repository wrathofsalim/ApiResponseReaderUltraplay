// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UP.DataLayer;

#nullable disable

namespace UP.DataLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230630185518_inits")]
    partial class inits
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UP.Core.Entities.BetEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLive")
                        .HasColumnType("bit");

                    b.Property<int>("MatchEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MatchEntityId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("UP.Core.Entities.EventEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SportEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SportEntityId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("UP.Core.Entities.MatchEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("EventEntityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MatchType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventEntityId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("UP.Core.Entities.OddEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BetEntityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("SpecialBetValue")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("BetEntityId");

                    b.ToTable("Odds");
                });

            modelBuilder.Entity("UP.Core.Entities.SportEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("UP.Core.Entities.BetEntity", b =>
                {
                    b.HasOne("UP.Core.Entities.MatchEntity", "MatchEntity")
                        .WithMany("Bets")
                        .HasForeignKey("MatchEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchEntity");
                });

            modelBuilder.Entity("UP.Core.Entities.EventEntity", b =>
                {
                    b.HasOne("UP.Core.Entities.SportEntity", "SportEntity")
                        .WithMany("Events")
                        .HasForeignKey("SportEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportEntity");
                });

            modelBuilder.Entity("UP.Core.Entities.MatchEntity", b =>
                {
                    b.HasOne("UP.Core.Entities.EventEntity", "EventEntity")
                        .WithMany("Matches")
                        .HasForeignKey("EventEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventEntity");
                });

            modelBuilder.Entity("UP.Core.Entities.OddEntity", b =>
                {
                    b.HasOne("UP.Core.Entities.BetEntity", "BetEntity")
                        .WithMany("Odds")
                        .HasForeignKey("BetEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BetEntity");
                });

            modelBuilder.Entity("UP.Core.Entities.BetEntity", b =>
                {
                    b.Navigation("Odds");
                });

            modelBuilder.Entity("UP.Core.Entities.EventEntity", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("UP.Core.Entities.MatchEntity", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("UP.Core.Entities.SportEntity", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
